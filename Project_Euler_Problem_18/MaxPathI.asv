clear all; close all; clc; tic

% We can read in a triangle from a file, or generate a triangle of arbitrary
% size to find a path from the top to bottom which yields a maximum sum for
% any lower trianglular matrix containing random numbers...
 
% A = [ 3 0 0 0 0 0; 7 4 0 0 0 0; 2 4 6 0 0 0; 8 5 9 3 0 0; 0 0 1 1 0 0; 0 0 1 2 3 0 ];
A = readmatrix("triangle_small.csv"); 
% A = csvread("triangle_large.csv"); 

% N = 15; M = N; 
% 
% A = zeros( N, M);
% 
% for j = 1:M
%     for i = 1:N
%         if( i <= j )
%             % A( i, j ) = 1;
%             % A( i, j ) = randi( [ 1,10 ] );
%         end
%     end
% end

% Transpose matrix A to march through naturally.

A = cat( 1, A, zeros( 1, size( A, 1 ) ) );
A = cat( 2, A, zeros( size( A, 1 ), 1 ) );

A = A'; 

N = size(A,1); M = size(A,2);

I = zeros( N, M );

for j = 1:1:M
    for i = 1:1:N
        I( i, j ) = i;
    end
end

for j = 1:1:M
    for i = 1:1:N
        if( i > j )
            I( i, j ) = 0;
        end
    end
end

K = [ 1 1; 1 2 ]; 

L = zeros( size( K, 1 ), M ); 

B = zeros( 1, 2 ); U = zeros( 1, 2 );

R = zeros( size( K,1 ), 1 ); RR = zeros( size( K, 1 ), 1 );

for i = 1:1:size(K,1)
    L( i, 1 ) = I( 1, 1 );
end

ii = 1;
while( ii <= size( K,1) )    
    
    L( ii, 1:size(K,2) ) = K( ii, 1:size(K,2) );   

    for j = 1:1:size( K, 2 )

        [ U( 1, 1 ), ~, ~ ] = find( I( :, j ) == L( ii, j ) );
        R( ii, 1 ) = R( ii, 1 ) + A( U( 1, 1 ), j );        
    end
   
    U = 0;

    for j = size(K,2)+1:1:M - 1

        [ U( 1, 1 ), ~, ~ ] = find( I( :, j ) == L( ii, j - 1 ) );
        [ U( 1, 2 ), ~, ~ ] = find( I( :, j ) == L( ii, j - 1 ) + 1 );
        [ U( 1, 3 ), ~, ~ ] = find( I( :, j + 1 ) == L( ii, j - 1 ) + 2 );

        V ( 1, 1 ) = R( ii, 1 );

        if( A( U( 1, 1 ), j ) >= A( U( 1, 2 ), j ) )   
           
            V( 1, 1 ) = A( U( 1, 1 ), j ) + A( U( 1, 1 ), j + 1 );
            V( 1, 2 ) = A( U( 1, 1 ), j ) + A( U( 1, 2 ), j + 1 );

            if( V( 1, 1 ) > V( 1, 2 ) )
                RR( 1, 1 ) = V( 1, 1 );            
                L( ii, j ) = I( U( 1, 1 ), j );     
                V( 1, 1 ) = 0; V( 1, 2 ) = 0;
            else
                 RR( 1, 1 ) = V( 1, 2 );            
                 L( ii, j ) = I( U( 1, 1 ), j );  
                 V( 1, 1 ) = 0; V( 1, 2 ) = 0;
            end            
            
        elseif ( A( U( 1, 2 ), j ) >= A( U( 1, 1 ), j ) ) 

           V( 1, 1 ) = A( U( 1, 2 ), j ) + A( U( 1, 2 ), j + 1 );
           V( 1, 2 ) = A( U( 1, 2 ), j ) + A( U( 1, 3 ), j + 1 );

            if( V( 1, 1 ) > V( 1, 2 ) )
                RR( 1, 2 ) = V( 1, 1 );            
                L( ii, j ) = I( U( 1, 2 ), j );       
            else
                 RR( 1, 2 ) = V( 1, 2 );            
                 L( ii, j ) = I( U( 1, 2 ), j );   
            end      

        end

        if( RR( 1, 1 ) > RR( 2, 1 ) )
        
            R( ii, 1 ) = R( ii, 1 ) + RR( 1, 1 ); 
            RR( 1, 1 ) = 0;
        else
        
            R( ii, 1 ) = R( ii, 1 ) + RR( 2, 1 ); 
            RR( 2, 1 ) = 0;
        end
    end  

    B( 1, 2 ) = R( ii, 1 );
        
    if( B( 1, 2 ) > B( 1, 1 ) )

        B = circshift( B, -1, 2 ); 
        B( 1, 2 ) = 0;
    else
        B( 1, 2 ) = 0;
    end      
    
    ii = ii + 1;
end
toc

